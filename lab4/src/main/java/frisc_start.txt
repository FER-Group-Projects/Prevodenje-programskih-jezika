	MOVE 40000, R7
	CALL F_MAIN
	HALT

; f: (R0, R1) -> (R6=R0*R1)
MUL	PUSH R0
	PUSH R1
	PUSH R2
	PUSH R3
	PUSH R4
	MOVE 0, R2
	MOVE 1, R3
	MOVE 0, R4			; preparing R4 (if R0 NEGATIVE and R1 POSITIVE or R0 POSITIVE and R1 NEGATIVE => R4=1, R4=0 otherwise)
	OR R0, R4, R4
	XOR R1, R4, R4
	ROTL R4, 1, R4
	AND R4, 1, R4
	CMP R0, 0			; R0 = abs(R0)
	JP_SGT C1
	JP_EQ E1
	SUB R2, R0, R0
C1	CMP R1, 0			; R1 = abs(R1)
	JP_SGT L1
	JP_EQ E1
	SUB R2, R1, R1
L1	ADD R0, R2, R2
	SUB R1, R3, R1
	JP_NZ L1
	CMP R4, 1			; if R4==1 => negate the output, do nothing otherwise
	JP_NE E1
	MOVE 0, R4
	SUB R4, R2, R2
E1	MOVE R2, R6
	POP R4
	POP R3
	POP R2
	POP R1
	POP R0
	RET
	
; f: (R0, R1) -> (R6=R0/R1)
DIV	PUSH R0
	PUSH R1
	PUSH R2
	PUSH R3
	PUSH R4
	MOVE 0, R2
	MOVE 1, R3
	MOVE 0, R4			; preparing R4 (if R0 NEGATIVE and R1 POSITIVE or R0 POSITIVE and R1 NEGATIVE => R4=1, R4=0 otherwise)
	OR R0, R4, R4
	XOR R1, R4, R4
	ROTL R4, 1, R4
	AND R4, 1, R4
	CMP R0, 0			; R0 = abs(R0)
	JP_SGT C2
	JP_EQ E22
	SUB R2, R0, R0
C2	CMP R1, 0			; R1 = abs(R1)
	JP_SGT L2
	JP_EQ E22
	SUB R2, R1, R1
L2	SUB R0, R1, R0
	JP_N E21
	ADD R2, R3, R2
	JP L2
E21	CMP R4, 1			; if R4==1 => negate the output, do nothing otherwise
	JP_NE E22
	MOVE 0, R4
	SUB R4, R2, R2
E22	MOVE R2, R6
	POP R4
	POP R3
	POP R2
	POP R1
	POP R0
	RET

; f: (R0, R1) -> (R6=R0%R1), CONDITION : R0>=0 && R1>0
MOD	PUSH R0
L3	SUB R0, R1, R0
	CMP R0, 0
	JP_SGT L3
	JP_EQ E3
	ADD R0, R1, R0
E3	MOVE R0, R6
	POP R0
	RET